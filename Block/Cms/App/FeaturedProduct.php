<?php

namespace Vnecoms\VendorsFeaturedProduct\Block\App;

use Vnecoms\VendorsProduct\Model\Source\Approval as ProductApproval;
use Vnecoms\VendorsFeaturedProduct\Model\ResourceModel\Product\CollectionFactory as FeaturedCollectionFactory;

$om = \Magento\Framework\App\ObjectManager::getInstance();
$moduleManager = $om->create('Magento\Framework\Module\Manager');

if($moduleManager->isEnabled('Vnecoms_VendorsCms')) {
    class FeaturedProduct extends \Vnecoms\VendorsCms\Block\App\Product\ProductsList
    {
        /**
         * @var \Vnecoms\VendorsFeaturedProduct\Model\ResourceModel\Product\CollectionFactory
         */
        protected $_featuredProductsCollectionFactory;

        /**
         * FeaturedProduct constructor.
         * @param \Magento\Catalog\Block\Product\Context $context
         * @param \Magento\Catalog\Model\ResourceModel\Product\CollectionFactory $productCollectionFactory
         * @param \Magento\Catalog\Model\Product\Visibility $catalogProductVisibility
         * @param \Magento\Framework\App\Http\Context $httpContext
         * @param \Magento\Rule\Model\Condition\Sql\Builder $sqlBuilder
         * @param \Magento\CatalogWidget\Model\Rule $rule
         * @param \Magento\Widget\Helper\Conditions $conditionsHelper
         * @param FeaturedCollectionFactory $featuredProductCollectionFactory
         * @param array $data
         */
        public function __construct
        (
            \Magento\Catalog\Block\Product\Context $context,
            \Magento\Catalog\Model\ResourceModel\Product\CollectionFactory $productCollectionFactory,
            \Magento\Catalog\Model\Product\Visibility $catalogProductVisibility,
            \Magento\Framework\App\Http\Context $httpContext,
            \Magento\Rule\Model\Condition\Sql\Builder $sqlBuilder,
            \Magento\CatalogWidget\Model\Rule $rule,
            \Magento\Widget\Helper\Conditions $conditionsHelper,
            FeaturedCollectionFactory $featuredProductCollectionFactory,
            \Vnecoms\Vendors\Model\VendorFactory $vendorFactory,
            array $data = []
        )
        {
            $this->_featuredProductsCollectionFactory = $featuredProductCollectionFactory;
            parent::__construct($context, $productCollectionFactory, $catalogProductVisibility, $httpContext, $sqlBuilder, $rule, $conditionsHelper, $vendorFactory, $data);
        }

        /**
         * @return $this|\Magento\Catalog\Model\ResourceModel\Product\Collection|\Magento\Framework\Data\Collection\AbstractDb
         */
        public function createCollection()
        {
            $collection = parent::createCollection(); // TODO: Change the autogenerated stub

            $featuredCollection = $this->_featuredProductsCollectionFactory->create();
            $featuredCollection->addFieldToFilter('vendor_id', $this->getVendor()->getId());
            $today = $this->_localeDate->date(date('y-m-d'));
            $today = $today->format('Y-m-d');

            $productIds = $featuredCollection->getColumnValues('product_id');
            $collection->addAttributeToFilter('approval',ProductApproval::STATUS_APPROVED)
                ->addAttributeToFilter('entity_id',['in' => $productIds]);

            $collection->joinTable(
                ['featured_product' => $collection->getTable('ves_vendor_featured_product')],
                "product_id=entity_id",
                ['featured_from', 'featured_to','feature_id' => 'entity_id','featured_order' => 'sort_order'],
                'featured_product.vendor_id = e.vendor_id',
                'right'
            )->getSelect()->where('featured_product.featured_from is null OR featured_product.featured_from <= "'.$today.'"')
                ->where('featured_product.featured_to is null OR featured_product.featured_to >= "'.$today.'"')
                ->order('featured_product.sort_order ASC');

            return $collection;
        }

        /**
         * Return identifiers for produced content
         *
         * @return array
         */
        public function getIdentities()
        {
            return ['featured_products_' . $this->getVendor()->getId()];
        }
    }
}
else {
    class FeaturedProduct {}
}
